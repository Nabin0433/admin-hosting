{"version":3,"sources":["pages/login/Login.js"],"names":["Login","useCookies","setCookie","useState","adminEmail","setAdminEmail","adminPassword","setAdminPassword","dataValidate","setDataValidate","error","setError","dispatch","useDispatch","className","md","name","onChange","e","target","value","type","placeholder","autoComplete","xs","onClick","loginData","isNaN","email","phone","axios","post","process","password","then","data","login","_id","user","role","token","catch","err","response","alert","color"],"mappings":"sRA+IeA,UA1HD,WACZ,MAAsBC,YAAW,CAAC,SAAzBC,EAAT,oBAEA,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAA0CF,mBAAS,IAAnD,mBAAOG,EAAP,KAAsBC,EAAtB,KAEA,EAAwCJ,oBAAS,GAAjD,mBAAOK,EAAP,KAAqBC,EAArB,KACA,EAA0BN,mBAAS,MAAnC,mBAAOO,EAAP,KAAcC,EAAd,KAEMC,EAAWC,cAwCjB,OACE,qBAAKC,UAAU,qDAAf,SACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAMA,UAAU,yBAAhB,SACE,cAAC,IAAD,CAAMC,GAAG,IAAT,SACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAOD,UAAU,MAAjB,SACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,oBAAIA,UAAU,cAAd,mBACA,mBAAGA,UAAU,aAAb,mCACCJ,GACC,mBAAGI,UAAU,QAAb,0CAEF,eAAC,IAAD,CAAaA,UAAU,OAAvB,UACE,cAAC,IAAD,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAOE,KAAK,iBAGhB,cAAC,IAAD,CACEC,SAAU,SAACC,GAAD,OAAOb,EAAca,EAAEC,OAAOC,QACxCC,KAAK,OACLC,YAAY,uBACZC,aAAa,iBAGfnB,GAAcI,GACd,mBAAGM,UAAU,OAAb,wCAEF,eAAC,IAAD,CAAaA,UAAU,OAAvB,UACE,cAAC,IAAD,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAOE,KAAK,wBAGhB,cAAC,IAAD,CACEC,SAAU,SAACC,GAAD,OAAOX,EAAiBW,EAAEC,OAAOC,QAC3CC,KAAK,WACLC,YAAY,WACZC,aAAa,yBAGfjB,GAAiBE,GACjB,mBAAGM,UAAU,OAAb,4BAEF,eAAC,IAAD,WACE,cAAC,IAAD,CAAMU,GAAG,IAAT,SACE,cAAC,IAAD,CACEC,QApFT,WACb,GAAIrB,GAAcE,EAAe,CAC/B,IAAIoB,EAAYC,MAAMvB,GAClB,CAAEwB,MAAOxB,GACT,CAAEyB,MAAOzB,GACb0B,IACGC,KADH,UARaC,wBAQb,OAPcA,yBAOd,2BAEON,GAFP,IAGIO,SAAU3B,KAEX4B,MAAK,SAACC,GACLvB,EACEwB,YAAM,CACJC,IAAKF,EAAKA,KAAKG,KAAKD,IACpBE,KAAMJ,EAAKA,KAAKG,KAAKC,KACrBX,MAAOO,EAAKA,KAAKG,KAAKV,MACtBY,MAAOL,EAAKA,KAAKK,SAGrBtC,EAAU,OAAQ,CAChBmC,IAAKF,EAAKA,KAAKG,KAAKD,IACpBE,KAAMJ,EAAKA,KAAKG,KAAKC,KACrBX,MAAOO,EAAKA,KAAKG,KAAKV,MACtBY,MAAOL,EAAKA,KAAKK,WAGpBC,OAAM,SAACC,GAAS,IAAD,EACd/B,EAAQ,UAAC+B,EAAIC,gBAAL,aAAC,EAAcR,MACvBS,MAAM,kCAGVnC,GAAgB,IAsDIoC,MAAM,UACN/B,UAAU,OAHZ,qBAQF,cAAC,IAAD,CAAMU,GAAG,IAAIV,UAAU,aAAvB,SACE,cAAC,IAAD,CAAS+B,MAAM,OAAO/B,UAAU,OAAhC","file":"static/js/22.7cb666b2.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport {\r\n  CButton,\r\n  CCard,\r\n  CCardBody,\r\n  CCardGroup,\r\n  CCol,\r\n  CContainer,\r\n  CForm,\r\n  CInput,\r\n  CInputGroup,\r\n  CInputGroupPrepend,\r\n  CInputGroupText,\r\n  CRow,\r\n} from \"@coreui/react\";\r\nimport CIcon from \"@coreui/icons-react\";\r\nimport { useCookies } from \"react-cookie\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { login } from \"../../localyStore\";\r\nimport axios from \"axios\";\r\n\r\nconst Login = () => {\r\n  const [, setCookie] = useCookies([\"user\"]);\r\n\r\n  const [adminEmail, setAdminEmail] = useState(\"\");\r\n  const [adminPassword, setAdminPassword] = useState(\"\");\r\n\r\n  const [dataValidate, setDataValidate] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const BASE_URL = process.env.REACT_APP_SERVER;\r\n  const ADMIN_API = process.env.REACT_APP_ADMIN_LOGIN;\r\n\r\n  const Submit = () => {\r\n    if (adminEmail && adminPassword) {\r\n      let loginData = isNaN(adminEmail)\r\n        ? { email: adminEmail }\r\n        : { phone: adminEmail };\r\n      axios\r\n        .post(`${BASE_URL}${ADMIN_API}`, {\r\n          ...loginData,\r\n          password: adminPassword,\r\n        })\r\n        .then((data) => {\r\n          dispatch(\r\n            login({\r\n              _id: data.data.user._id,\r\n              role: data.data.user.role,\r\n              email: data.data.user.email,\r\n              token: data.data.token,\r\n            })\r\n          );\r\n          setCookie(\"user\", {\r\n            _id: data.data.user._id,\r\n            role: data.data.user.role,\r\n            email: data.data.user.email,\r\n            token: data.data.token,\r\n          });\r\n        })\r\n        .catch((err) => {\r\n          setError(err.response?.data);\r\n          alert(\"you are not a Admin !!\");\r\n        });\r\n    } else {\r\n      setDataValidate(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"c-app c-default-layout flex-row align-items-center\">\r\n      <CContainer>\r\n        <CRow className=\"justify-content-center\">\r\n          <CCol md=\"5\">\r\n            <CCardGroup>\r\n              <CCard className=\"p-4\">\r\n                <CCardBody>\r\n                  <CForm>\r\n                    <h1 className=\"text-center\">Login</h1>\r\n                    <p className=\"text-muted\">Sign In Admin Account</p>\r\n                    {error && (\r\n                      <p className=\"error\"> Invalid : Email or Password</p>\r\n                    )}\r\n                    <CInputGroup className=\"mb-3\">\r\n                      <CInputGroupPrepend>\r\n                        <CInputGroupText>\r\n                          <CIcon name=\"cil-user\" />\r\n                        </CInputGroupText>\r\n                      </CInputGroupPrepend>\r\n                      <CInput\r\n                        onChange={(e) => setAdminEmail(e.target.value)}\r\n                        type=\"text\"\r\n                        placeholder=\"UserName/PhoneNumber\"\r\n                        autoComplete=\"username\"\r\n                      />\r\n                    </CInputGroup>\r\n                    {!adminEmail && dataValidate && (\r\n                      <p className=\"warn\">Enter Email or PhoneNumber</p>\r\n                    )}\r\n                    <CInputGroup className=\"mb-4\">\r\n                      <CInputGroupPrepend>\r\n                        <CInputGroupText>\r\n                          <CIcon name=\"cil-lock-locked\" />\r\n                        </CInputGroupText>\r\n                      </CInputGroupPrepend>\r\n                      <CInput\r\n                        onChange={(e) => setAdminPassword(e.target.value)}\r\n                        type=\"password\"\r\n                        placeholder=\"Password\"\r\n                        autoComplete=\"current-password\"\r\n                      />\r\n                    </CInputGroup>\r\n                    {!adminPassword && dataValidate && (\r\n                      <p className=\"warn\">Enter Password</p>\r\n                    )}\r\n                    <CRow>\r\n                      <CCol xs=\"6\">\r\n                        <CButton\r\n                          onClick={Submit}\r\n                          color=\"primary\"\r\n                          className=\"px-4\"\r\n                        >\r\n                          Login\r\n                        </CButton>\r\n                      </CCol>\r\n                      <CCol xs=\"6\" className=\"text-right\">\r\n                        <CButton color=\"link\" className=\"px-0\">\r\n                          Forgot password?\r\n                        </CButton>\r\n                      </CCol>\r\n                    </CRow>\r\n                  </CForm>\r\n                </CCardBody>\r\n              </CCard>\r\n            </CCardGroup>\r\n          </CCol>\r\n        </CRow>\r\n      </CContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n"],"sourceRoot":""}