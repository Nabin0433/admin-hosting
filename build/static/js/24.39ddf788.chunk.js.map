{"version":3,"sources":["pages/register/Register.js"],"names":["Register","user","useSelector","selectUser","useState","adminName","setAdminName","adminPhone","setAdminPhone","adminEmail","setAdminEmail","adminFirstPassword","setAdminFrstPassword","adminSecondPassword","setAdminSecondPassword","validData","setValidData","error","setError","axios","post","process","name","email","password","phone","role","document","querySelector","value","headers","Authorization","token","then","res","alert","catch","err","response","data","errors","className","md","lg","xl","map","i","msg","class","for","id","selected","forEach","e","required","onChange","target","type","placeholder","autoComplete","onClick","color","block"],"mappings":"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","file":"static/js/24.39ddf788.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport {\r\n  CButton,\r\n  CCard,\r\n  CCardBody,\r\n  CCol,\r\n  CContainer,\r\n  CForm,\r\n  CInput,\r\n  CInputGroup,\r\n  CInputGroupPrepend,\r\n  CInputGroupText,\r\n  CRow,\r\n} from \"@coreui/react\";\r\nimport CIcon from \"@coreui/icons-react\";\r\nimport axios from \"axios\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectUser } from \"../../localyStore\";\r\n\r\nconst Register = () => {\r\n  const user = useSelector(selectUser);\r\n\r\n  const BASE_URL = process.env.REACT_APP_SERVER;\r\n  const ADMIN_CREATE = process.env.REACT_APP_ADMIN_REGISTER;\r\n\r\n  const [adminName, setAdminName] = useState();\r\n  const [adminPhone, setAdminPhone] = useState();\r\n  const [adminEmail, setAdminEmail] = useState();\r\n  const [adminFirstPassword, setAdminFrstPassword] = useState();\r\n  const [adminSecondPassword, setAdminSecondPassword] = useState();\r\n  const [validData, setValidData] = useState(false);\r\n  const [error, setError] = useState();\r\n  const Register = () => {\r\n    setValidData(true);\r\n    if (\r\n      adminEmail &&\r\n      adminPhone &&\r\n      adminName &&\r\n      adminFirstPassword === adminSecondPassword\r\n    ) {\r\n      axios\r\n        .post(\r\n          `${BASE_URL}${ADMIN_CREATE}`,\r\n          {\r\n            name: adminName,\r\n            email: adminEmail,\r\n            password: adminSecondPassword,\r\n            phone: adminPhone,\r\n            role: document.querySelector(\"#inputGroupSelect01\").value,\r\n          },\r\n          {\r\n            headers: {\r\n              Authorization: `bearer ${user?.token}`,\r\n            },\r\n          }\r\n        )\r\n        .then((res) => {\r\n          setAdminName(\"\");\r\n          setAdminPhone(\"\");\r\n          setAdminEmail(\"\");\r\n          setAdminFrstPassword(\"\");\r\n          setAdminSecondPassword(\"\");\r\n          alert(\r\n            \"new admin created name of \" +\r\n              adminName +\r\n              \"role of \" +\r\n              document.querySelector(\"#inputGroupSelect01\").value\r\n          );\r\n        })\r\n        .catch((err) => {\r\n          setError(err.response.data.errors);\r\n        });\r\n    }\r\n  };\r\n  return (\r\n    <CContainer>\r\n      <CRow className=\"justify-content-center\">\r\n        <CCol md=\"9\" lg=\"7\" xl=\"6\">\r\n          <CCard className=\"mx-4 my-4\">\r\n            <CCardBody className=\"p-4\">\r\n              <CForm>\r\n                <h1>Register</h1>\r\n                <p className=\"text-muted\">Create Admin Account</p>\r\n                {error\r\n                  ? error?.map((i) => (\r\n                      <p className=\"error\">* {i.msg}hjkhkjhk</p>\r\n                    ))\r\n                  : \"\"}\r\n                <div class=\"input-group mb-3\">\r\n                  <div class=\"input-group-prepend\">\r\n                    <label class=\"input-group-text\" for=\"inputGroupSelect01\">\r\n                      Select Roles\r\n                    </label>\r\n                  </div>\r\n                  <select class=\"custom-select\" id=\"inputGroupSelect01\">\r\n                    <option selected>sub-admin</option>\r\n                    <option>driver</option>\r\n                    <option>editor</option>\r\n                    <option>vendor</option>\r\n                    <option>salesTeam</option>\r\n                    <option>supportTeam </option>\r\n                  </select>\r\n                </div>\r\n                <hr />\r\n                {error ? error.forEach((e) => <p>{e.msg}</p>) : \"\"}\r\n                <CInputGroup className=\"mb-3\">\r\n                  <CInputGroupPrepend>\r\n                    <CInputGroupText>\r\n                      <CIcon name=\"cil-user\" />\r\n                    </CInputGroupText>\r\n                  </CInputGroupPrepend>\r\n                  <CInput\r\n                    required\r\n                    onChange={(e) => {\r\n                      setAdminName(e.target.value);\r\n                    }}\r\n                    value={adminName}\r\n                    type=\"text\"\r\n                    placeholder=\"Name\"\r\n                    autoComplete=\"true\"\r\n                  />\r\n                </CInputGroup>\r\n                {validData && !adminName && (\r\n                  <p className=\"warn\">Require name</p>\r\n                )}\r\n                <CInputGroup className=\"mb-3\">\r\n                  <CInputGroupPrepend>\r\n                    <CInputGroupText>\r\n                      <CIcon name=\"cil-phone\" />\r\n                    </CInputGroupText>\r\n                  </CInputGroupPrepend>\r\n                  <CInput\r\n                    required\r\n                    onChange={(e) => {\r\n                      setAdminPhone(e.target.value);\r\n                    }}\r\n                    value={adminPhone}\r\n                    type=\"number\"\r\n                    placeholder=\"Number\"\r\n                    autoComplete=\"true\"\r\n                  />\r\n                </CInputGroup>\r\n                {validData && !adminPhone && (\r\n                  <p className=\"warn\">Require PhoneNumber</p>\r\n                )}\r\n                <CInputGroup className=\"mb-3\">\r\n                  <CInputGroupPrepend>\r\n                    <CInputGroupText>@</CInputGroupText>\r\n                  </CInputGroupPrepend>\r\n                  <CInput\r\n                    required\r\n                    value={adminEmail}\r\n                    onChange={(e) => {\r\n                      setAdminEmail(e.target.value);\r\n                    }}\r\n                    type=\"text\"\r\n                    placeholder=\"Email\"\r\n                    autoComplete=\"email\"\r\n                  />\r\n                </CInputGroup>\r\n                {validData && !adminEmail && (\r\n                  <p className=\"warn\">Enter Valid Email</p>\r\n                )}\r\n                <CInputGroup className=\"mb-3\">\r\n                  <CInputGroupPrepend>\r\n                    <CInputGroupText>\r\n                      <CIcon name=\"cil-lock-locked\" />\r\n                    </CInputGroupText>\r\n                  </CInputGroupPrepend>\r\n                  <CInput\r\n                    required\r\n                    value={adminFirstPassword}\r\n                    onChange={(e) => {\r\n                      setAdminFrstPassword(e.target.value);\r\n                    }}\r\n                    type=\"password\"\r\n                    placeholder=\"Password\"\r\n                    autoComplete=\"new-password\"\r\n                  />\r\n                </CInputGroup>\r\n                <CInputGroup className=\"mb-4\">\r\n                  <CInputGroupPrepend>\r\n                    <CInputGroupText>\r\n                      <CIcon name=\"cil-lock-locked\" />\r\n                    </CInputGroupText>\r\n                  </CInputGroupPrepend>\r\n                  <CInput\r\n                    required\r\n                    value={adminSecondPassword}\r\n                    onChange={(e) => {\r\n                      setAdminSecondPassword(e.target.value);\r\n                    }}\r\n                    type=\"password\"\r\n                    placeholder=\"Repeat password\"\r\n                    autoComplete=\"new-password\"\r\n                  />\r\n                </CInputGroup>\r\n                {!(adminFirstPassword === adminSecondPassword) && (\r\n                  <p className=\"warn\">Password Not Matched</p>\r\n                )}\r\n                <CButton onClick={Register} color=\"success\" block>\r\n                  Create Account\r\n                </CButton>\r\n                {/* new admin logic */}\r\n              </CForm>\r\n            </CCardBody>\r\n          </CCard>\r\n        </CCol>\r\n      </CRow>\r\n    </CContainer>\r\n  );\r\n};\r\n\r\nexport default Register;\r\n"],"sourceRoot":""}