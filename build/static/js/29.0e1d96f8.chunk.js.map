{"version":3,"sources":["views/games/GameResult.js"],"names":["GameResult","useState","game","setGame","players","setPlayers","token","useSelector","selectUser","useEffect","api","results","process","axios","get","headers","Authorization","then","res","data","catch","err","console","log","alert","xl","onChange","e","target","value","selected","items","fields","key","_classes","label","hover","striped","itemsPerPage","clickableRows","pagination","scopedSlots","user","item","index","name","playedTime","Date","parseInt","toDateString","result","status","color","prize","isAnswerCorrect","useranswer","yourAnswer","SiNo"],"mappings":"4PA8HeA,UAjHI,WACjB,MAAwBC,mBAAS,QAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA8BF,mBAAS,MAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACQC,EAAUC,YAAYC,KAAtBF,MACRG,qBAAU,WACR,IAAIC,EACAC,EACS,SAATT,IACFQ,EAAME,wBACND,EAAU,mBAEC,iBAATT,IACFQ,EAAME,2CACND,EAAU,0BAEC,aAATT,IACFQ,EAAME,0CACND,EAAU,sBAEC,gBAATT,IACFQ,EAAME,6CACND,EAAU,yBAEZE,IACGC,IAAIF,sBAA+BF,EAAK,CACvCK,QAAS,CACPC,cAAc,UAAD,OAAYV,MAG5BW,MAAK,SAACC,GACLb,EAAWa,EAAIC,KAAKR,OAErBS,OAAM,SAACC,GACNC,QAAQC,IAAIF,GACZG,MAAM,oBAET,CAAClB,EAAOJ,IAUX,OADAoB,QAAQC,IAAInB,GAEV,cAAC,IAAD,UACE,cAAC,IAAD,CAAMqB,GAAI,GAAV,SACE,eAAC,IAAD,WACE,cAAC,IAAD,UACE,yBAAQC,SAAU,SAACC,GAAD,OAAOxB,EAAQwB,EAAEC,OAAOC,QAA1C,UACE,wBAAQA,MAAM,eAAd,0BACA,wBAAQA,MAAM,WAAd,sBACA,wBAAQA,MAAM,cAAd,yBACA,wBAAQC,UAAQ,EAACD,MAAM,OAAvB,uBAKJ,cAAC,IAAD,UACE,cAAC,IAAD,CACEE,MAAO3B,EACP4B,OAAQ,CACN,OACA,CACEC,IAAK,OACLC,SAAU,oBAEZ,aACA,CACED,IAAK,aACLE,MAAgB,SAATjC,EAAkB,cAAgB,IACzCgC,SAAU,oBAEH,SAAThC,EAAkB,SAAW,SAE/BkC,OAAK,EACLC,SAAO,EACPC,aAAc,GACdC,eAAa,EACbC,YAAU,EACVC,YAAa,CACXC,KAAM,SAACC,EAAMC,GAAP,eACJD,GAAQ,8CAAiBA,QAAjB,IAAiBA,GAAjB,UAAiBA,EAAMD,YAAvB,aAAiB,EAAYG,YAA7B,QAAqCF,EAAKD,MAAjCE,IACnBE,WAAY,SAACH,EAAMC,GAAP,OACV,6BACG,IAAIG,KAAKC,SAAQ,OAACL,QAAD,IAACA,OAAD,EAACA,EAAMG,aAAaG,gBAD/BL,IAKXM,OAAQ,SAACP,GAAD,QArDJQ,EAqDI,OACN,6BACE,cAAC,IAAD,CACEC,OAxDFD,EAwDiB,UAACR,EAAKU,aAAN,QAAeV,EAAKW,gBAvDtC,cAAXH,IAAqC,IAAXA,EACrB,SAEA,WAmDO,UAGG,UAAAR,EAAKU,aAAL,QAAcV,EAAKW,iBAChB,UACA,iBAIVC,WAAY,SAACZ,GAAD,aAAU,uCAAKA,EAAKa,kBAAV,QAAwB,MAC9CC,KAAM,SAACd,EAAMC,GAAP,OAAiB,6BAAKA,EAAQ","file":"static/js/29.0e1d96f8.chunk.js","sourcesContent":["import {\n  CBadge,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CDataTable,\n  CRow,\n} from \"@coreui/react\";\nimport axios from \"axios\";\nimport React, { useState, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { selectUser } from \"src/localyStore\";\nconst GameResult = () => {\n  const [game, setGame] = useState(\"Quiz\");\n  const [players, setPlayers] = useState(null);\n  const { token } = useSelector(selectUser);\n  useEffect(() => {\n    let api;\n    let results;\n    if (game === \"Quiz\") {\n      api = process.env.REACT_APP_ADMIN_GET_GAME_QUIZ_USERS;\n      results = \"userQuizHistory\";\n    }\n    if (game === \"Surprise_Box\") {\n      api = process.env.REACT_APP_ADMIN_GET_GAME_SURPRICE_BOX_USERS;\n      results = \"userSurpriseBoxHistory\";\n    }\n    if (game === \"Spin_Win\") {\n      api = process.env.REACT_APP_ADMIN_GET_GAME_SPIN_USERS;\n      results = \"userSpinWinHistory\";\n    }\n    if (game === \"Scratch_Win\") {\n      api = process.env.REACT_APP_ADMIN_GET_GAME_SCRACH_USERS;\n      results = \"userScratchWinHistory\";\n    }\n    axios\n      .get(process.env.REACT_APP_SERVER + api, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      })\n      .then((res) => {\n        setPlayers(res.data[results]);\n      })\n      .catch((err) => {\n        console.log(err);\n        alert(\"server-down\");\n      });\n  }, [token, game]);\n\n  const getBadge = (status) => {\n    if (status === \"try again\" || status === false) {\n      return \"danger\";\n    } else {\n      return \"success\";\n    }\n  };\n  console.log(players);\n  return (\n    <CRow>\n      <CCol xl={12}>\n        <CCard>\n          <CCardHeader>\n            <select onChange={(e) => setGame(e.target.value)}>\n              <option value=\"Surprise_Box\">Surprise_Box</option>\n              <option value=\"Spin_Win\">Spin_Win</option>\n              <option value=\"Scratch_Win\">Scratch_Win</option>\n              <option selected value=\"Quiz\">\n                Quiz\n              </option>\n            </select>\n          </CCardHeader>\n          <CCardBody>\n            <CDataTable\n              items={players}\n              fields={[\n                \"SiNo\",\n                {\n                  key: \"user\",\n                  _classes: \"font-weight-bold\",\n                },\n                \"playedTime\",\n                {\n                  key: \"useranswer\",\n                  label: game === \"Quiz\" ? \"User Answer\" : \" \",\n                  _classes: \"font-weight-bold\",\n                },\n                game === \"Quiz\" ? \"result\" : \"prize\",\n              ]}\n              hover\n              striped\n              itemsPerPage={10}\n              clickableRows\n              pagination\n              scopedSlots={{\n                user: (item, index) =>\n                  item && <td key={index}>{item?.user?.name ?? item.user}</td>,\n                playedTime: (item, index) => (\n                  <td key={index}>\n                    {new Date(parseInt(item?.playedTime)).toDateString()}\n                  </td>\n                ),\n                //\n                result: (item) => (\n                  <td>\n                    <CBadge\n                      color={getBadge(item.prize ?? item.isAnswerCorrect)}\n                    >\n                      {item.prize ?? item.isAnswerCorrect\n                        ? \"Correct\"\n                        : \"Incorrect\"}\n                    </CBadge>\n                  </td>\n                ),\n                useranswer: (item) => <td>{item.yourAnswer ?? \"\"}</td>,\n                SiNo: (item, index) => <td>{index + 1}</td>,\n              }}\n            />\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </CRow>\n  );\n};\n\nexport default GameResult;\n"],"sourceRoot":""}