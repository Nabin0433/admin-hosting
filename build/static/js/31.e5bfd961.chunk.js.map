{"version":3,"sources":["views/orders/Orders.js"],"names":["getBadge","status","Orders","useSelector","selectUser","role","token","history","useHistory","useState","orderList","setOrderList","useEffect","getOrders","process","axios","get","headers","Authorization","then","res","changeData","data","orders","catch","err","console","log","newData","map","i","name","shipping","address","price","totalAmount","date","createdAt","paymentStatus","id","_id","payment","paymentType","xl","items","fields","key","_classes","label","_style","width","sorter","filter","columnFilter","tableFilter","itemsPerPageSelect","pagination","hover","itemsPerPage","clickableRows","onRowClick","item","push","scopedSlots","Status","color"],"mappings":"oQAgBMA,EAAW,SAACC,GAChB,OAAQA,GACN,IAAK,YACH,MAAO,UACT,IAAK,UACH,MAAO,SACT,QACE,MAAO,YA8GEC,UA3Gf,WACE,MAAwBC,YAAYC,KAA5BC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MACRC,EAAUC,cAChB,EAAkCC,qBAAlC,mBAAOC,EAAP,KAAkBC,EAAlB,KAEAC,qBAAU,WACR,IAAIC,EACAP,IAEAO,EADW,UAATR,EACUS,qCACM,WAATT,EACGS,yCAEAD,EAEdE,IACGC,IA5BMF,sBA4BOD,EAAW,CACvBI,QAAS,CACPC,cAAc,UAAD,OAAYZ,MAG5Ba,MAAK,SAACC,GACLC,EAAWD,EAAIE,KAAKC,WAErBC,OAAM,SAACC,GACNC,QAAQC,IAAIF,SAIjB,CAACnB,IACJ,IAAMe,EAAa,SAACC,GAClB,IAAIM,EACS,UAATvB,IACFuB,EAAUN,EAAKO,KAAI,SAACC,GAAD,MAAQ,CACzBC,KAAMD,EAAEE,SAASD,KACjBE,QAASH,EAAEE,SAASC,QACpBC,MAAOJ,EAAEK,YACTC,KAAMN,EAAEO,UACRpC,OAAQ6B,EAAEQ,cACVC,GAAIT,EAAEU,IACNC,QAASX,EAAEY,iBAGF,WAATrC,IACFuB,EAAUN,EAAKO,KAAI,SAACC,GAAD,MAAQ,CACzBC,KAAMD,EAAEC,KACRE,QAASH,EAAEG,QACXC,MAAOJ,EAAEI,MACTE,KAAMN,EAAEO,UACRpC,OAAQ6B,EAAEQ,cACVC,GAAIT,EAAEU,IACNC,QAASX,EAAEY,iBAGf/B,EAAaiB,IAEf,OACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAMe,GAAI,GAAV,SACE,eAAC,IAAD,WACE,cAAC,IAAD,qBACA,cAAC,IAAD,UACE,cAAC,IAAD,CACEC,MAAOlC,EACPmC,OAAQ,CACN,CAAEC,IAAK,OAAQC,SAAU,oBACzB,UACA,QACA,UACA,OACA,CACED,IAAK,SACLE,MAAO,GACPC,OAAQ,CAAEC,MAAO,OACjBC,QAAQ,EACRC,QAAQ,IAGZD,QAAM,EACNE,cAAY,EACZC,aAAW,EACXC,oBAAkB,EAClBC,YAAU,EACVC,OAAK,EACLC,aAAc,GACdC,eAAa,EACbC,WAAY,SAACC,GACE,UAATxD,GACFE,EAAQuD,KAAR,iBAAuBD,EAAKtB,MAIhCwB,YAAa,CACXC,OAAQ,SAACH,GAAD,OACN,6BACE,cAAC,IAAD,CAAQI,MAAOjE,EAAS6D,EAAK5D,QAA7B,SAAuC4D,EAAK5D","file":"static/js/31.e5bfd961.chunk.js","sourcesContent":["import {\r\n  CBadge,\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CCol,\r\n  CDataTable,\r\n  CRow,\r\n} from \"@coreui/react\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\nimport axios from \"axios\";\r\nimport { selectUser } from \"src/localyStore\";\r\nconst server = process.env.REACT_APP_SERVER;\r\n\r\nconst getBadge = (status) => {\r\n  switch (status) {\r\n    case \"Complited\":\r\n      return \"success\";\r\n    case \"Pending\":\r\n      return \"danger\";\r\n    default:\r\n      return \"primary\";\r\n  }\r\n};\r\nfunction Orders() {\r\n  const { role, token } = useSelector(selectUser);\r\n  const history = useHistory();\r\n  const [orderList, setOrderList] = useState();\r\n\r\n  useEffect(() => {\r\n    let getOrders;\r\n    if (token) {\r\n      if (role === \"admin\") {\r\n        getOrders = process.env.REACT_APP_ADMIN_ORDER_GET;\r\n      } else if (role === \"vendor\") {\r\n        getOrders = process.env.REACT_APP_ADMIN_ORDER_VENDOR_GET;\r\n      } else {\r\n        getOrders = getOrders;\r\n      }\r\n      axios\r\n        .get(server + getOrders, {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        })\r\n        .then((res) => {\r\n          changeData(res.data.orders);\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    }\r\n    return;\r\n  }, [token]);\r\n  const changeData = (data) => {\r\n    let newData;\r\n    if (role === \"admin\") {\r\n      newData = data.map((i) => ({\r\n        name: i.shipping.name,\r\n        address: i.shipping.address,\r\n        price: i.totalAmount,\r\n        date: i.createdAt,\r\n        status: i.paymentStatus,\r\n        id: i._id,\r\n        payment: i.paymentType,\r\n      }));\r\n    }\r\n    if (role === \"vendor\") {\r\n      newData = data.map((i) => ({\r\n        name: i.name,\r\n        address: i.address,\r\n        price: i.price,\r\n        date: i.createdAt,\r\n        status: i.paymentStatus,\r\n        id: i._id,\r\n        payment: i.paymentType,\r\n      }));\r\n    }\r\n    setOrderList(newData);\r\n  };\r\n  return (\r\n    <CRow>\r\n      <CCol xl={12}>\r\n        <CCard>\r\n          <CCardHeader>Orders</CCardHeader>\r\n          <CCardBody>\r\n            <CDataTable\r\n              items={orderList}\r\n              fields={[\r\n                { key: \"name\", _classes: \"font-weight-bold\" },\r\n                \"address\",\r\n                \"price\",\r\n                \"payment\",\r\n                \"date\",\r\n                {\r\n                  key: \"Status\",\r\n                  label: \"\",\r\n                  _style: { width: \"10%\" },\r\n                  sorter: false,\r\n                  filter: false,\r\n                },\r\n              ]}\r\n              sorter\r\n              columnFilter\r\n              tableFilter\r\n              itemsPerPageSelect\r\n              pagination\r\n              hover\r\n              itemsPerPage={20}\r\n              clickableRows\r\n              onRowClick={(item) => {\r\n                if (role === \"admin\") {\r\n                  history.push(`/order/${item.id}`);\r\n                }\r\n                return;\r\n              }}\r\n              scopedSlots={{\r\n                Status: (item) => (\r\n                  <td>\r\n                    <CBadge color={getBadge(item.status)}>{item.status}</CBadge>\r\n                  </td>\r\n                ),\r\n              }}\r\n            />\r\n          </CCardBody>\r\n        </CCard>\r\n      </CCol>\r\n    </CRow>\r\n  );\r\n}\r\n\r\nexport default Orders;\r\n"],"sourceRoot":""}