{"version":3,"sources":["views/users/Users.js"],"names":["getBadge","status","Users","useState","usersData","setUsersData","user","setUser","token","useSelector","selectUser","history","useHistory","queryPage","useLocation","search","match","currentPage","Number","page","setPage","useEffect","User","axios","get","process","headers","Authorization","then","data","users","ultiModealTeam","catch","err","console","log","xl","onChange","e","target","value","items","fields","key","_classes","hover","striped","itemsPerPage","activePage","clickableRows","onRowClick","item","push","_id","scopedSlots","color","SiNo","index","onActivePageChange","newPage","pages","doubleArrows","align"],"mappings":"oQAgBMA,EAAW,SAACC,GAChB,OAAQA,GACN,IAAK,SACH,MAAO,UACT,IAAK,WACH,MAAO,YACT,IAAK,UACH,MAAO,UACT,IAAK,SACH,MAAO,SACT,QACE,MAAO,YA+FEC,UA5FD,WACZ,MAAkCC,mBAAS,MAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAwBF,mBAAS,SAAjC,mBAAOG,EAAP,KAAaC,EAAb,KACQC,EAAUC,YAAYC,KAAtBF,MAEFG,EAAUC,cACVC,EAAYC,cAAcC,OAAOC,MAAM,gBAAiB,IACxDC,EAAcC,OAAOL,GAAaA,EAAU,GAAKA,EAAU,GAAK,GACtE,EAAwBV,mBAASc,GAAjC,mBAAOE,EAAP,KAAaC,EAAb,KAEAC,qBAAU,WACR,IAAIC,EAECA,EADI,UAAThB,EACY,wBACA,yBACZiB,IACGC,IAAIC,wBAA+BH,EAAM,CACxCI,QAAS,CACPC,cAAc,UAAD,OAAYnB,MAG5BoB,MAAK,SAACC,GACL,IAAIC,EACO,UAATxB,EAAmBuB,EAAKA,KAAKvB,KAAOuB,EAAKA,KAAKE,eAChD1B,EAAayB,MAEdE,OAAM,SAACC,GACNC,QAAQC,IAAIF,QAEf,CAAC3B,EAAME,IAUV,OAJAa,qBAAU,WACRJ,IAAgBE,GAAQC,EAAQH,KAC/B,CAACA,EAAaE,IAGf,cAAC,IAAD,UACE,cAAC,IAAD,CAAMiB,GAAI,GAAV,SACE,eAAC,IAAD,WACE,cAAC,IAAD,UACE,yBAAQC,SAAU,SAACC,GAAD,OAAO/B,EAAQ+B,EAAEC,OAAOC,QAA1C,UACE,wBAAQA,MAAM,QAAd,mBACA,wBAAQA,MAAM,QAAd,yBAGJ,eAAC,IAAD,WACE,cAAC,IAAD,CACEC,MAAOrC,EACPsC,OAAQ,CACN,OACA,CAAEC,IAAK,QAASC,SAAU,oBAC1B,QACA,aACA,QAEFC,OAAK,EACLC,SAAO,EACPC,aAAc,GACdC,WAAY7B,EACZ8B,eAAa,EACbC,WAAY,SAACC,GAAD,OACVxC,EAAQyC,KACG,UAAT9C,EAAA,iBAA6B6C,EAAKE,KAAlC,iBAAoDF,EAAKE,OAG7DC,YAAa,CACXrD,OAAQ,SAACkD,GAAD,OACN,6BACE,cAAC,IAAD,CAAQI,MAAOvD,EAASmD,EAAKlD,QAA7B,SAAuCkD,EAAKlD,YAGhDuD,KAAM,SAACL,EAAMM,GAAP,OAAiB,6BAAKA,EAAQ,QAGxC,cAAC,IAAD,CACET,WAAY7B,EACZuC,mBAjDO,SAACC,GAClB1C,IAAgB0C,GAAWhD,EAAQyC,KAAR,sBAA4BO,KAiD7CC,MAAO,EACPC,cAAc,EACdC,MAAM","file":"static/js/37.c90fb679.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\nimport {\r\n  CBadge,\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CCol,\r\n  CDataTable,\r\n  CRow,\r\n  CPagination,\r\n} from \"@coreui/react\";\r\nimport axios from \"axios\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectUser } from \"src/localyStore\";\r\n\r\nconst getBadge = (status) => {\r\n  switch (status) {\r\n    case \"Active\":\r\n      return \"success\";\r\n    case \"Inactive\":\r\n      return \"secondary\";\r\n    case \"Pending\":\r\n      return \"warning\";\r\n    case \"Banned\":\r\n      return \"danger\";\r\n    default:\r\n      return \"primary\";\r\n  }\r\n};\r\nconst Users = () => {\r\n  const [usersData, setUsersData] = useState(null);\r\n  const [user, setUser] = useState(\"Users\");\r\n  const { token } = useSelector(selectUser);\r\n\r\n  const history = useHistory();\r\n  const queryPage = useLocation().search.match(/page=([0-9]+)/, \"\");\r\n  const currentPage = Number(queryPage && queryPage[1] ? queryPage[1] : 1);\r\n  const [page, setPage] = useState(currentPage);\r\n\r\n  useEffect(() => {\r\n    let User;\r\n    user === \"Users\"\r\n      ? (User = \"/api/auth/userDetails\")\r\n      : (User = \"/api/auth/adminDetails\");\r\n    axios\r\n      .get(process.env.REACT_APP_SERVER + User, {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      })\r\n      .then((data) => {\r\n        let users =\r\n          user === \"Users\" ? data.data.user : data.data.ultiModealTeam;\r\n        setUsersData(users);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  }, [user, token]);\r\n\r\n  const pageChange = (newPage) => {\r\n    currentPage !== newPage && history.push(`/users?page=${newPage}`);\r\n  };\r\n\r\n  useEffect(() => {\r\n    currentPage !== page && setPage(currentPage);\r\n  }, [currentPage, page]);\r\n\r\n  return (\r\n    <CRow>\r\n      <CCol xl={12}>\r\n        <CCard>\r\n          <CCardHeader>\r\n            <select onChange={(e) => setUser(e.target.value)}>\r\n              <option value=\"Users\">Users</option>\r\n              <option value=\"Admin\">Admins</option>\r\n            </select>\r\n          </CCardHeader>\r\n          <CCardBody>\r\n            <CDataTable\r\n              items={usersData}\r\n              fields={[\r\n                \"SiNo\",\r\n                { key: \"email\", _classes: \"font-weight-bold\" },\r\n                \"phone\",\r\n                \"registered\",\r\n                \"role\",\r\n              ]}\r\n              hover\r\n              striped\r\n              itemsPerPage={10}\r\n              activePage={page}\r\n              clickableRows\r\n              onRowClick={(item) =>\r\n                history.push(\r\n                  user === \"Users\" ? `/users/${item._id}` : `/admin/${item._id}`\r\n                )\r\n              }\r\n              scopedSlots={{\r\n                status: (item) => (\r\n                  <td>\r\n                    <CBadge color={getBadge(item.status)}>{item.status}</CBadge>\r\n                  </td>\r\n                ),\r\n                SiNo: (item, index) => <td>{index + 1}</td>,\r\n              }}\r\n            />\r\n            <CPagination\r\n              activePage={page}\r\n              onActivePageChange={pageChange}\r\n              pages={2}\r\n              doubleArrows={false}\r\n              align=\"center\"\r\n            />\r\n          </CCardBody>\r\n        </CCard>\r\n      </CCol>\r\n    </CRow>\r\n  );\r\n};\r\n\r\nexport default Users;\r\n"],"sourceRoot":""}